package backtracking.b9663;

/*
제한시간 10초
- N X N 크기의 이차원 배열 체스판 board 사용
- N 개의 퀸이 주어졌을 때, 서로 공격할 수 없게 놓는 경우의 수 구하기
- 서로 공격할 수 있는지 없는지 확인하는 check 메서드
- 현재까지 놓은 퀸의 개수를 저장하는 queen
- 퀸을 놓는 방법의 수 count
- (i = 0 ~ N-1)(j = 0 ~ N-1) 상의 좌표 돌아다니며 DFS
    - 도중 queen == N 이 되면 count++, 백트래킹


 */

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;

public class Main {

    static int N;
    static int count = 0;
    static boolean[][] board;

    static void showBoard(){
        for(int i=0; i<N; i++){
            for(int j=0; j<N; j++){
                System.out.print(board[i][j] + " ");
            }
            System.out.println();
        }
    }

    static boolean check(int x, int y){
        for(int i=0; i<N; i++){
            if(board[i][y]) return false;
        }
        for(int i=0; i<N; i++){
            if(board[x][i]) return false;
        }
        for(int i=0; i<N; i++){
            for(int j=0; j<N; j++){
                if(Math.abs(x-i) == Math.abs(y-j)) return false;
            }
        }
        return true;
    }

    static void DFS(int queen){
        if(queen==N){
            count++;
            return;
        }
        for(int i=0; i<N; i++){
            for(int j=0; j<N; j++){
                if(check(i, j)){
                    board[i][j] = true;
                    DFS(queen+1);
                }
            }
        }
    }

    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        N = Integer.parseInt(br.readLine());
        board = new boolean[N][N];
        for(int i=0; i<N; i++){
            for(int j=0; j<N; j++){
                board[i][j] = false;
            }
        }

        DFS(0);

        System.out.println(count);
    }
}
